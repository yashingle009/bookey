// Firestore Security Rules for Bookey Flutter App
// Copy these rules to your Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow reading user profiles for other users (for seller info)
      allow read: if request.auth != null;
      
      // User's images subcollection
      match /images/{imageId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Books collection - anyone can read, only authenticated users can write their own books
    match /books/{bookId} {
      // Anyone can read books (including guest users)
      allow read: if true;
      
      // Only authenticated users can create books
      allow create: if request.auth != null 
        && request.auth.uid == resource.data.sellerId;
      
      // Only the seller can update/delete their own books
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.sellerId;
    }
    
    // Cart collection - users can only access their own cart items
    match /cart/{cartId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Allow creation if the userId matches the authenticated user
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
    }
    
    // Orders collection - users can only access their own orders
    match /orders/{orderId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Allow creation if the userId matches the authenticated user
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
      
      // Order items subcollection
      match /items/{itemId} {
        allow read, write: if request.auth != null 
          && request.auth.uid == get(/databases/$(database)/documents/orders/$(orderId)).data.userId;
      }
    }
    
    // Conversations collection (for messaging between users)
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null 
        && request.auth.uid in resource.data.participants;
      
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // Purchases collection - users can only access their own purchases
    match /purchases/{purchaseId} {
      allow read, write: if request.auth != null 
        && (request.auth.uid == resource.data.buyerId 
            || request.auth.uid == resource.data.sellerId);
      
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.buyerId;
    }
  }
}

// Firebase Storage Rules (for book images)
// Copy these rules to your Firebase Console > Storage > Rules

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Images folder - anyone can read, only authenticated users can write
    match /images/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Book images folder - anyone can read, only authenticated users can write
    match /book_images/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // User-specific folders
    match /book_images/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}

// SETUP INSTRUCTIONS:

1. Go to Firebase Console (https://console.firebase.google.com)
2. Select your project (bookey-6618c)
3. Navigate to Firestore Database > Rules
4. Replace the existing rules with the Firestore rules above
5. Click "Publish" to save the rules

6. Navigate to Storage > Rules
7. Replace the existing rules with the Storage rules above
8. Click "Publish" to save the rules

// TESTING THE RULES:

1. Use the "Test Cart Functionality" button in the BookDetailsScreen
2. Check the Flutter console for detailed error messages
3. If you see permission-denied errors, verify the rules are correctly applied
4. Make sure your user is properly authenticated before testing

// COMMON ISSUES AND SOLUTIONS:

1. "permission-denied" errors:
   - Ensure the user is logged in
   - Check that the rules match your data structure
   - Verify the userId field names match your implementation

2. "requires an index" errors:
   - Go to Firestore Database > Indexes
   - Create composite indexes as suggested by the error messages
   - Common indexes needed:
     * books: status (Ascending), createdAt (Descending)
     * cart: userId (Ascending), createdAt (Descending)
     * orders: userId (Ascending), createdAt (Descending)

3. Storage upload errors:
   - Verify Storage rules allow write access for authenticated users
   - Check that the storage bucket exists and is properly configured
   - Ensure the file size is within limits (default 10MB)

// DEBUGGING TIPS:

1. Enable Firestore debug logging in your app
2. Check the Firebase Console > Firestore > Usage tab for rule evaluations
3. Use the Rules Playground in Firebase Console to test specific scenarios
4. Monitor the Flutter console for detailed error messages from FirestoreService
